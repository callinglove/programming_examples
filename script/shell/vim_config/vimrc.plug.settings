" g:plugs from vim-plug

if has_key(g:plugs, 'vim-airline')
    let g:airline#extensions#tabline#enabled = 1

    set laststatus=2 "1为关闭底部状态栏 2为开启"
    set t_Co=256     "终端开启256色支持"

    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif

    " powerline symbols
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    let g:airline_symbols.linenr = '☰'
    let g:airline_symbols.maxlinenr = ''
    let g:airline_symbols.dirty='⚡'
endif


if has_key(g:plugs, 'nerdtree')
    "NERDTree 配置:F2快捷键显示当前目录树
    map <F2> :NERDTreeToggle<CR>

    " ignore files in NERDTree
    let NERDTreeIgnore=['\.pyc$', '\~$']

    " 修改树的显示图标
    let g:NERDTreeDirArrowExpandable = '+'
    let g:NERDTreeDirArrowCollapsible = '-'

    " 窗口位置、大小
    let g:NERDTreeWinPos='left'
    let g:NERDTreeWinSize=30

    " 窗口是否显示行号
    let g:NERDTreeShowLineNumbers=1

    " 不显示隐藏文件
    let g:NERDTreeShowHidden=0

    " 打开vim时如果没有文件自动打开NERDTree
    autocmd vimenter * if !argc()|NERDTree|

    " 当NERDTree为剩下的唯一窗口时自动关闭
    autocmd bufenter * if(winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

    " 打开vim时自动打开NERDTree
    autocmd vimenter * NERDTree
endif


if has_key(g:plugs, 'taglist')
    map <F3> :TlistToggle<CR>

    " 如果ctags不在Path路径下,则配置ctags的路径
    let Tlist_Ctags_Cmd = '/usr/bin/ctags'

    let Tlist_Show_One_File = 1         "不同时显示多个文件的tag，只显示当前文件的
    let Tlist_Exit_OnlyWindow = 1       "如果taglist窗口是最后一个窗口，则退出vim
    let Tlist_Use_Right_Window = 0      "在左侧窗口中显示taglist窗口
    "let Tlist_Sort_Type = "name"        "taglist以tag名字进行排序，缺省是按tag在文件中出现的顺序进行排序
    let Tlist_Use_SingleClick = 1       "设置单击tag就跳转到定义处, 缺省双击
    "let Tlist_Auto_Open=1               "启动vim自动打开taglist窗口
    let Tlist_Close_On_Select=1         "在选择了tag后自动关闭taglist窗口
    let Tlist_File_Fold_Auto_Close=1   "当同时显示多个文件中的tag时,可使taglist只显示当前文件tag，其它文件的tag都被折叠起来。
    let Tlist_GainFocus_On_ToggleOpen=1 "在使用:TlistToggle打开taglist窗口时,输入焦点在taglist窗口中
    let Tlist_Process_File_Always=1     "taglist始终解析文件中的tag，不管taglist窗口有没有打开
    let Tlist_Use_Horiz_Window = 0      "设置taglist窗口纵向显示
    " Tlist_WinHeight和Tlist_WinWidth可以设置taglist窗口的高度和宽度
endif


if has_key(g:plugs, 'tagbar')
    " 将开启tagbar的快捷键设置为　<Leader>tb
    nmap <Leader>tb :TagbarToggle<CR>
    " 这是tagbar一打开，光标即在tagbar页面内，默认在vim打开的文件内
    let g:tagbar_autofocus = 1
    " 设置标签不排序，默认排序
    let g:tagbar_sort = 0

    " 设置ctags所在路径
    let g:tagbar_ctags_bin='/usr/bin/ctags'
    " 让tagbar在页面左侧显示，默认右边
    "let g:tagbar_left = 1
    " 设置tagbar的宽度
    let g:tagbar_width=30
    " 在某些情况下自动打开tagbar
    "autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()
endif


if has_key(g:plugs, 'ctrlp.vim')
"let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
"let g:ctrlp_custom_ignore = {
"  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
"  \ 'file': '\v\.(exe|so|dll)$',
"  \ 'link': 'some_bad_symbolic_links',
"  \ }
endif


if has_key(g:plugs, 'vim-cmake')
    let g:cmake_export_compile_commands = 1
    let g:cmake_ycm_symlinks = 0
    " let g:cmake_command = cmake
    " g:cmake_build_type = 
endif


if has_key(g:plugs, 'clang_complete')
    " 自动选择第一个匹配项但不插入到代码中
    let g:clang_auto_select = 1
    " 在->. ., ::后自动补全
    let g:clang_complete_auto = 1
    " 发现错误之后打开QuickFix窗口
    let g:clang_complete_copen = 1
    "高亮警告和错误
    let g:clang_hl_errors = 1
    " 插入第一个补全后关闭预览窗口
    let g:clang_close_preview = 1
    " 开启对C++11的编译支持
    let g:clang_user_options = '-std=c++11'
    " 设定clang库路径
    let g:clang_library_path = '/usr/lib64/llvm/libclang.so'
    " 补全预处理指令，宏和常数，默认为0，不补全
    let g:clang_complete_macros = 1
    " 补全代码模式，比如循环等，默认为0，不补全
    let g:clang_complete_patterns = 1
    " <C-]>跳转到声明
    let g:clang_jumpto_declaration_key = "<C-]>"
    " <C-w>]在预览窗口中打开声明
    let g:clang_jumpto_declaration_in_preview_key = "<C-w>]"
    " <C-t>回跳
    let g:clang_jumpto_back_key = "<C-t>"
    " 使用UltiSnips进行代码片段补全
    let g:clang_snippets = 1
    let g:clang_snippets_engine = 'ultisnips'
endif


if has_key(g:plugs, 'vim-clang')
    " from https://blog.csdn.net/Demorngel/article/details/73006631
    " 开启对C11和C++11的支持
    let g:clang_c_options = '-std=gnu11'
    let g:clang_cpp_options = '-std=c++11 -stdlib=libc++'
    " 关闭语法检查
    let g:clang_check_syntax_auto = 0
    " 不要自动格式化代码
    let g:clang_format_auto = 0
    " 代码格式化风格选项依次有LLVM，Google，Chromium，Mozilla，WebKit
    "let g:clang_format_style = 'LLVM'
    " 使得vim-clang的补全与其他IDE一致
    let g:clang_cpp_completeopt = 'longest,menuone,preview'
endif


if has_key(g:plugs, 'YouCompleteMe')
    " Python Semantic Completion
    " let g:ycm_python_binary_path = '/usr/bin/python3'

    " 全局配置文件路径
    let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
    " 询问是否加载当前目录.ycm_extra_conf.py配置
    let g:ycm_confirm_extra_conf=0
    " 语法关键词补全
    let g:ycm_seed_identifiers_with_syntax=1
    " 开启 YCM 基于标签引擎
    let g:ycm_collect_identifiers_from_tags_files = 1
    " 注释和字符串中的文字也会被收入补全
    let g:ycm_collect_identifiers_from_comments_and_strings = 0
    " 从第2个键入字符就开始罗列匹配项
    let g:ycm_min_num_of_chars_for_completion=2
    " 在注释输入中也能补全
    let g:ycm_complete_in_comments = 1
    " 在字符串输入中也能补全
    let g:ycm_complete_in_strings = 1
    " 弹出列表时选择第1项的快捷键(默认为<TAB>和<Down>)
    let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
    " 弹出列表时选择前1项的快捷键(默认为<S-TAB>和<UP>)
    let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
    " 主动补全, 默认为<C-Space>
    let g:ycm_key_invoke_completion = '<c-z>'
    " 自动补全触发条件
    let g:ycm_semantic_triggers =  {
    \   'c,cpp,python,java,go,erlang,perl':['re!\w{2}'],
    \   'cs,lua,javascript':['re!\w{2}'],
    \}
    " 停止显示补全列表(防止列表影响视野), 可以按<C-Space>重新弹出
    "let g:ycm_key_list_stop_completion = ['<C-y>']

    " preview window to auto-close after you select a completion string
    "let g:ycm_autoclose_preview_window_after_completion=1
    " to close the preview window after leaving insert mode
    let g:ycm_autoclose_preview_window_after_insertion=1

    " 错误标记
    let g:ycm_error_symbol = '✗'
    " 警告标记
    let g:ycm_warning_symbol = '⚠'
    " YcmErrorSign
    " YcmWarningSign
    " YcmErrorLine
    " YcmWarningLine
    highlight YcmErrorSection term=italic ctermbg=Grey cterm=bold
    highlight YcmWarningSection term=italic ctermbg=Grey cterm=bold

    nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
    nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
    nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
    nmap <F4> :YcmDiags<CR>
endif
